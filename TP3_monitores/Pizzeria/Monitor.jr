/* This JR file was generated by m2jr */
/* for the signal and wait signaling discipline */


// Monitor.m, line 1: _monitor Monitor {  

class Monitor {
  sem m_mutex = 1;
  sem m_urgentq = 0;
  int m_n_urgentq = 0;
  String m_name;
  public Monitor(String n) {
    this.m_name = n;
  }
  private void m_next() {
      if (m_n_urgentq > 0) {
        m_n_urgentq--;
        V(m_urgentq);
      }
      else {
        V(m_mutex);
      }
  }

// Monitor.m, line 2: 


// Monitor.m, line 3:     _condvar ponerQueso;


// Monitor.m, line 4:     _condvar ponerSalsa;

private m_condvar ponerQueso = new m_condvar("ponerQueso");

// Monitor.m, line 5:     _condvar ponerMorron;

private m_condvar ponerSalsa = new m_condvar("ponerSalsa");

// Monitor.m, line 6:     _condvar ponerPizza;  

private m_condvar ponerMorron = new m_condvar("ponerMorron");

// Monitor.m, line 7: 


// Monitor.m, line 8:     _proc void colocarQueso(){

private m_condvar ponerPizza = new m_condvar("ponerPizza");
public
void
colocarQueso
(){
    op void m_return_from_wait();
    P(m_mutex);

// Monitor.m, line 9:         _signal(ponerPizza); //aviso que estoy listo

{ if ((ponerPizza ).m_signal()) {
  P(m_mutex);
}}

// Monitor.m, line 10:         _wait(ponerQueso);

{  m_condvar m_cv = (ponerQueso );
  send m_cv.m_wait(m_return_from_wait,0);
  send m_cv.m_wait_ranks(0);
  m_next();
  P(m_return_from_wait);
}
// Monitor.m, line 11:         //coloca el queso


// Monitor.m, line 12:         


// Monitor.m, line 13:     }


// Monitor.m, line 14: 


// Monitor.m, line 15:     _proc void colocarMorron(){

  m_next();
}
public
void
colocarMorron
(){
    op void m_return_from_wait();
    P(m_mutex);

// Monitor.m, line 16:         _signal(ponerPizza);

{ if ((ponerPizza ).m_signal()) {
  P(m_mutex);
}}

// Monitor.m, line 17:         _wait(ponerMorron);

{  m_condvar m_cv = (ponerMorron );
  send m_cv.m_wait(m_return_from_wait,0);
  send m_cv.m_wait_ranks(0);
  m_next();
  P(m_return_from_wait);
}
// Monitor.m, line 18:         //coloca el morron


// Monitor.m, line 19:         


// Monitor.m, line 20:     }


// Monitor.m, line 21: 


// Monitor.m, line 22:     _proc void colocarSalsa(){

  m_next();
}
public
void
colocarSalsa
(){
    op void m_return_from_wait();
    P(m_mutex);

// Monitor.m, line 23:         _signal(ponerPizza);

{ if ((ponerPizza ).m_signal()) {
  P(m_mutex);
}}

// Monitor.m, line 24:         _wait(ponerSalsa);

{  m_condvar m_cv = (ponerSalsa );
  send m_cv.m_wait(m_return_from_wait,0);
  send m_cv.m_wait_ranks(0);
  m_next();
  P(m_return_from_wait);
}
// Monitor.m, line 25:         //colocarsalsa


// Monitor.m, line 26:         


// Monitor.m, line 27:     }


// Monitor.m, line 28: 


// Monitor.m, line 29:     _proc void terminarPizza(int i){

  m_next();
}
public
void
terminarPizza
(int
i
){
    op void m_return_from_wait();
    P(m_mutex);

// Monitor.m, line 30:         _wait(ponerPizza);

{  m_condvar m_cv = (ponerPizza );
  send m_cv.m_wait(m_return_from_wait,0);
  send m_cv.m_wait_ranks(0);
  m_next();
  P(m_return_from_wait);
}
// Monitor.m, line 31:         _wait(ponerPizza);

{  m_condvar m_cv = (ponerPizza );
  send m_cv.m_wait(m_return_from_wait,0);
  send m_cv.m_wait_ranks(0);
  m_next();
  P(m_return_from_wait);
}
// Monitor.m, line 32:         _wait(ponerPizza); //debe esperar a que los 3 ayudantes esten listos

{  m_condvar m_cv = (ponerPizza );
  send m_cv.m_wait(m_return_from_wait,0);
  send m_cv.m_wait_ranks(0);
  m_next();
  P(m_return_from_wait);
}
// Monitor.m, line 33:         if(i==1){

if
(i
==1){
// Monitor.m, line 34:             _signal(ponerQueso);

{ if ((ponerQueso ).m_signal()) {
  P(m_mutex);
}}

// Monitor.m, line 35:         }else if(i==2){

}else
if
(i
==2){
// Monitor.m, line 36:             _signal(ponerSalsa);

{ if ((ponerSalsa ).m_signal()) {
  P(m_mutex);
}}

// Monitor.m, line 37:         }else _signal(ponerMorron);

}else
{ if ((ponerMorron ).m_signal()) {
  P(m_mutex);
}}

// Monitor.m, line 38:     }


// Monitor.m, line 39: 


// Monitor.m, line 40: 


// Monitor.m, line 41: }

  m_next();
}

// Monitor.m, line 42: 


// Monitor.m, line 43: //Para compilar y hacer un Singal and Wait es de esta manera    m2jr -sw MonitorTest.m

}
