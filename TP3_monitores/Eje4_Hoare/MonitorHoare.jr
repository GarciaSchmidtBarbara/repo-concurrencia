/* This JR file was generated by m2jr */
/* for the signal and wait signaling discipline */


// MonitorHoare.m, line 1: _monitor MonitorHoare { //sin prioridades

class MonitorHoare {
  sem m_mutex = 1;
  sem m_urgentq = 0;
  int m_n_urgentq = 0;
  String m_name;
  public MonitorHoare(String n) {
    this.m_name = n;
  }
  private void m_next() {
      if (m_n_urgentq > 0) {
        m_n_urgentq--;
        V(m_urgentq);
      }
      else {
        V(m_mutex);
      }
  }

// MonitorHoare.m, line 2:     private static final int N = 5; //Size of the buffer

private
static
final
int
N
=5;
// MonitorHoare.m, line 3: 


// MonitorHoare.m, line 4:     _var int[] buffer = new int[N];

private int
[]buffer
=new
int
[N
];
// MonitorHoare.m, line 5:     _var int front;

private int
front
;
// MonitorHoare.m, line 6:     _var int rear;

private int
rear
;
// MonitorHoare.m, line 7:     _var int cantLector;

private int
cantLector
;
// MonitorHoare.m, line 8:     _var int cantEscritor;

private int
cantEscritor
;
// MonitorHoare.m, line 9:     _var int lectoresEsperando;

private int
lectoresEsperando
;
// MonitorHoare.m, line 10:     _var int escritoresEsperando;

private int
escritoresEsperando
;
// MonitorHoare.m, line 11: 


// MonitorHoare.m, line 12:     _condvar puedoEscribir;


// MonitorHoare.m, line 13:     _condvar puedoLeer;  

private m_condvar puedoEscribir = new m_condvar("puedoEscribir");

// MonitorHoare.m, line 14: 


// MonitorHoare.m, line 15:     _proc void escribir(int data){

private m_condvar puedoLeer = new m_condvar("puedoLeer");
public
void
escribir
(int
data
){
    op void m_return_from_wait();
    P(m_mutex);

// MonitorHoare.m, line 16:         escritoresEsperando++;

escritoresEsperando
++;
// MonitorHoare.m, line 17:         //While: despues de despertar, el proceso vuelve a verificar la condicion, 


// MonitorHoare.m, line 18:         // y solo entra al monitor si se sigue cumpliendo lo que esperaba.


// MonitorHoare.m, line 19:         while(cantLector > 0 || cantEscritor > 0 ){

while
(cantLector
>0||cantEscritor
>0){
// MonitorHoare.m, line 20:             _wait(puedoEscribir);

{  m_condvar m_cv = (puedoEscribir );
  send m_cv.m_wait(m_return_from_wait,0);
  send m_cv.m_wait_ranks(0);
  m_next();
  P(m_return_from_wait);
}
// MonitorHoare.m, line 21:         }


// MonitorHoare.m, line 22:         escritoresEsperando--;

}escritoresEsperando
--;
// MonitorHoare.m, line 23:         cantEscritor++;

cantEscritor
++;
// MonitorHoare.m, line 24: 


// MonitorHoare.m, line 25:         System.out.println(data + " escribe" );

System
.out
.println
(data
+" escribe");
// MonitorHoare.m, line 26:         buffer[rear] = data;

buffer
[rear
]=data
;
// MonitorHoare.m, line 27:         rear = (rear + 1) % N;

rear
=(rear
+1)%N
;
// MonitorHoare.m, line 28: 


// MonitorHoare.m, line 29:         cantEscritor--;

cantEscritor
--;
// MonitorHoare.m, line 30:         if(escritoresEsperando>0){

if
(escritoresEsperando
>0){
// MonitorHoare.m, line 31:             _signal(puedoEscribir);

{ if ((puedoEscribir ).m_signal()) {
  P(m_mutex);
}}

// MonitorHoare.m, line 32:         }else{

}else
{
// MonitorHoare.m, line 33:             _signal(puedoLeer);

{ if ((puedoLeer ).m_signal()) {
  P(m_mutex);
}}

// MonitorHoare.m, line 34:         } 


// MonitorHoare.m, line 35:     }

}
// MonitorHoare.m, line 36: 


// MonitorHoare.m, line 37:     _proc void leer(){

  m_next();
}
public
void
leer
(){
    op void m_return_from_wait();
    P(m_mutex);

// MonitorHoare.m, line 38:         lectoresEsperando++;

lectoresEsperando
++;
// MonitorHoare.m, line 39:         while(cantEscritor>0 || escritoresEsperando>0){

while
(cantEscritor
>0||escritoresEsperando
>0){
// MonitorHoare.m, line 40:             _wait(puedoLeer);

{  m_condvar m_cv = (puedoLeer );
  send m_cv.m_wait(m_return_from_wait,0);
  send m_cv.m_wait_ranks(0);
  m_next();
  P(m_return_from_wait);
}
// MonitorHoare.m, line 41:         }


// MonitorHoare.m, line 42:         lectoresEsperando--;

}lectoresEsperando
--;
// MonitorHoare.m, line 43:         cantLector++;

cantLector
++;
// MonitorHoare.m, line 44: 


// MonitorHoare.m, line 45:         int result = buffer[front];

int
result
=buffer
[front
];
// MonitorHoare.m, line 46:         System.out.println(" lee : "+ result);

System
.out
.println
(" lee : "+result
);
// MonitorHoare.m, line 47:         front = (front + 1) % N;

front
=(front
+1)%N
;
// MonitorHoare.m, line 48: 


// MonitorHoare.m, line 49:         cantLector--;

cantLector
--;
// MonitorHoare.m, line 50:         if(cantLector == 0 && escritoresEsperando>0){

if
(cantLector
==0&&escritoresEsperando
>0){
// MonitorHoare.m, line 51:             _signal(puedoEscribir);

{ if ((puedoEscribir ).m_signal()) {
  P(m_mutex);
}}

// MonitorHoare.m, line 52:         }else{

}else
{
// MonitorHoare.m, line 53:             _signal(puedoLeer);

{ if ((puedoLeer ).m_signal()) {
  P(m_mutex);
}}

// MonitorHoare.m, line 54:         }


// MonitorHoare.m, line 55:     }

}
// MonitorHoare.m, line 56: 


// MonitorHoare.m, line 57: }

  m_next();
}

// MonitorHoare.m, line 58: 


// MonitorHoare.m, line 59: //Para compilar y hacer un Singal and Wait es de esta manera    m2jr -sw MonitorTest.m

}
