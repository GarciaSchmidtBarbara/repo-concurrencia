/* This JR file was generated by m2jr */
/* for the signal and continue signaling discipline */


// MonitorNotify.m, line 1: _monitor MonitorNotify {  //prioridad lectores

class MonitorNotify {
  sem m_mutex = 1;
  sem m_urgentq = 0;
  int m_n_urgentq = 0;
  String m_name;
  public MonitorNotify(String n) {
    this.m_name = n;
  }
  private void m_next() {
      if (m_n_urgentq > 0) {
        m_n_urgentq--;
        V(m_urgentq);
      }
      else {
        V(m_mutex);
      }
  }

// MonitorNotify.m, line 2:     // _signal(condvar) = despierta uno.


// MonitorNotify.m, line 3:     // _broadcast(condvar) = despierta a todos los que esperan en esa condicion.


// MonitorNotify.m, line 4:     private static final int N = 5; //Size of the buffer

private
static
final
int
N
=5;
// MonitorNotify.m, line 5: 


// MonitorNotify.m, line 6:     _var int[] buffer = new int[N];

private int
[]buffer
=new
int
[N
];
// MonitorNotify.m, line 7:     _var int front;

private int
front
;
// MonitorNotify.m, line 8:     _var int rear;

private int
rear
;
// MonitorNotify.m, line 9:     _var int cantLector;

private int
cantLector
;
// MonitorNotify.m, line 10:     _var int cantEscritor;

private int
cantEscritor
;
// MonitorNotify.m, line 11: 


// MonitorNotify.m, line 12:     _condvar puedoEscribir;


// MonitorNotify.m, line 13:     _condvar puedoLeer;  

private m_condvar puedoEscribir = new m_condvar("puedoEscribir");

// MonitorNotify.m, line 14: 


// MonitorNotify.m, line 15:     _proc void escribir(int data){

private m_condvar puedoLeer = new m_condvar("puedoLeer");
public
void
escribir
(int
data
){
    op void m_return_from_wait();
    P(m_mutex);

// MonitorNotify.m, line 16:         while(cantLector > 0 || cantEscritor > 0){ //si hay alguien leyendo o escribiendo espero

while
(cantLector
>0||cantEscritor
>0){
// MonitorNotify.m, line 17:             _wait(puedoEscribir);

{  m_condvar m_cv = (puedoEscribir );
  send m_cv.m_wait(m_return_from_wait,0);
  send m_cv.m_wait_ranks(0);
  m_next();
  P(m_return_from_wait);
  P(m_mutex);
}
// MonitorNotify.m, line 18:         }


// MonitorNotify.m, line 19:         cantEscritor++;

}cantEscritor
++;
// MonitorNotify.m, line 20:         System.out.println(data + " escribe" );

System
.out
.println
(data
+" escribe");
// MonitorNotify.m, line 21:         buffer[rear] = data;

buffer
[rear
]=data
;
// MonitorNotify.m, line 22:         rear = (rear + 1) % N;

rear
=(rear
+1)%N
;
// MonitorNotify.m, line 23: 


// MonitorNotify.m, line 24:         cantEscritor--;

cantEscritor
--;
// MonitorNotify.m, line 25:         _broadcast(puedoLeer); //despiesto a TODOS los lectores (si hay alguno esperando)

_broadcast
(puedoLeer
);
// MonitorNotify.m, line 26:         //Permite que multiples lectores accedan simultaneamente si es seguro hacerlo.


// MonitorNotify.m, line 27:         //Mejora el rendimiento porque evita tener lectores esperando innecesariamente.


// MonitorNotify.m, line 28:         //Requiere cuidado: todos los procesos despertados deben volver a verificar la condicion con while.


// MonitorNotify.m, line 29:     }


// MonitorNotify.m, line 30: 


// MonitorNotify.m, line 31:     _proc void leer(){

  m_next();
}
public
void
leer
(){
    op void m_return_from_wait();
    P(m_mutex);

// MonitorNotify.m, line 32:         while(cantEscritor > 0){

while
(cantEscritor
>0){
// MonitorNotify.m, line 33:             _wait(puedoLeer);

{  m_condvar m_cv = (puedoLeer );
  send m_cv.m_wait(m_return_from_wait,0);
  send m_cv.m_wait_ranks(0);
  m_next();
  P(m_return_from_wait);
  P(m_mutex);
}
// MonitorNotify.m, line 34:         }


// MonitorNotify.m, line 35:         cantLector++;

}cantLector
++;
// MonitorNotify.m, line 36:         int result = buffer[front];

int
result
=buffer
[front
];
// MonitorNotify.m, line 37:         System.out.println(" lee : "+ result);

System
.out
.println
(" lee : "+result
);
// MonitorNotify.m, line 38:         front = (front + 1) % N;

front
=(front
+1)%N
;
// MonitorNotify.m, line 39: 


// MonitorNotify.m, line 40:         cantLector--;

cantLector
--;
// MonitorNotify.m, line 41:         if(cantLector == 0){

if
(cantLector
==0){
// MonitorNotify.m, line 42:             _signal(puedoEscribir); //cuando no haya mas lectores doy paso a un escritor

(puedoEscribir ).m_signal();

// MonitorNotify.m, line 43:         }


// MonitorNotify.m, line 44:     }

}
// MonitorNotify.m, line 45: 


// MonitorNotify.m, line 46: }

  m_next();
}

// MonitorNotify.m, line 47: 


// MonitorNotify.m, line 48: //Para compilar y hacer un Singal and Wait es de esta manera    m2jr -sw MonitorTest.m

}
