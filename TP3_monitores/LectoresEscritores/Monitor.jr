/* This JR file was generated by m2jr */
/* for the signal and continue signaling discipline */


// Monitor.m, line 1: _monitor Monitor {

class Monitor {
  sem m_mutex = 1;
  sem m_urgentq = 0;
  int m_n_urgentq = 0;
  String m_name;
  public Monitor(String n) {
    this.m_name = n;
  }
  private void m_next() {
      if (m_n_urgentq > 0) {
        m_n_urgentq--;
        V(m_urgentq);
      }
      else {
        V(m_mutex);
      }
  }

// Monitor.m, line 2:     private static final int N = 5; //Size of the buffer

private
static
final
int
N
=5;
// Monitor.m, line 3: 


// Monitor.m, line 4:     _var String[] buffer = new String[N];

private String
[]buffer
=new
String
[N
];
// Monitor.m, line 5:     _var int front;

private int
front
;
// Monitor.m, line 6:     _var int rear;

private int
rear
;
// Monitor.m, line 7:     _var int count;

private int
count
;
// Monitor.m, line 8:     _var int cantLector;

private int
cantLector
;
// Monitor.m, line 9:     _var int cantEscritor;

private int
cantEscritor
;
// Monitor.m, line 10: 


// Monitor.m, line 11:     _condvar puedoEscribir;


// Monitor.m, line 12:     _condvar puedoLeer;  

private m_condvar puedoEscribir = new m_condvar("puedoEscribir");

// Monitor.m, line 13: 


// Monitor.m, line 14:     _proc void escribir(String data){

private m_condvar puedoLeer = new m_condvar("puedoLeer");
public
void
escribir
(String
data
){
    op void m_return_from_wait();
    P(m_mutex);

// Monitor.m, line 15:         while(cantLector > 0){

while
(cantLector
>0){
// Monitor.m, line 16:             _wait(puedoEscribir);

{  m_condvar m_cv = (puedoEscribir );
  send m_cv.m_wait(m_return_from_wait,0);
  send m_cv.m_wait_ranks(0);
  m_next();
  P(m_return_from_wait);
  P(m_mutex);
}
// Monitor.m, line 17:         }


// Monitor.m, line 18: 


// Monitor.m, line 19:         cantEscritor++;

}cantEscritor
++;
// Monitor.m, line 20: 


// Monitor.m, line 21:         buffer[rear] = data;

buffer
[rear
]=data
;
// Monitor.m, line 22:         rear = (rear + 1) % N;

rear
=(rear
+1)%N
;
// Monitor.m, line 23:         count++;

count
++;
// Monitor.m, line 24: 


// Monitor.m, line 25:         cantEscritor--;

cantEscritor
--;
// Monitor.m, line 26: 


// Monitor.m, line 27:         if(cantLector > 0){

if
(cantLector
>0){
// Monitor.m, line 28:             _signal(puedoLeer);

(puedoLeer ).m_signal();

// Monitor.m, line 29:         }


// Monitor.m, line 30:     }

}
// Monitor.m, line 31: 


// Monitor.m, line 32:     _proc String leer(){

  m_next();
}
public
String
leer
(){
    op void m_return_from_wait();
    P(m_mutex);

// Monitor.m, line 33:         cantLector++;

cantLector
++;
// Monitor.m, line 34: 


// Monitor.m, line 35:         if(cantEscritor > 0){

if
(cantEscritor
>0){
// Monitor.m, line 36:             _wait(puedoLeer);

{  m_condvar m_cv = (puedoLeer );
  send m_cv.m_wait(m_return_from_wait,0);
  send m_cv.m_wait_ranks(0);
  m_next();
  P(m_return_from_wait);
  P(m_mutex);
}
// Monitor.m, line 37:         }


// Monitor.m, line 38: 


// Monitor.m, line 39:         String result = buffer[front];

}String
result
=buffer
[front
];
// Monitor.m, line 40:         front = (front + 1) % N;

front
=(front
+1)%N
;
// Monitor.m, line 41:         count--;

count
--;
// Monitor.m, line 42:     }


// Monitor.m, line 43: 


// Monitor.m, line 44:     _proc void salir(){

  m_next();
throw new RuntimeException("reached end of non-void _proc (Monitor.m, line 44) without executing a return");
}
public
void
salir
(){
    op void m_return_from_wait();
    P(m_mutex);

// Monitor.m, line 45:         cantLector--;

cantLector
--;
// Monitor.m, line 46:         if(cantLector = 0){

if
(cantLector
=0){
// Monitor.m, line 47:             _signal(puedoEscribir);

(puedoEscribir ).m_signal();

// Monitor.m, line 48:         }


// Monitor.m, line 49:     }

}
// Monitor.m, line 50: }

  m_next();
}

// Monitor.m, line 51: 


// Monitor.m, line 52: /*


// Monitor.m, line 53: Este es el codigo para compilar un monitor que luego se utiliza 


// Monitor.m, line 54: en un programa .jr.


// Monitor.m, line 55: La manera en que se compila este monitor es la siguiente 


// Monitor.m, line 56:     m2jr  MonitorTest.m //monitor MESA Lampson y Redell


// Monitor.m, line 57:     m2jr -sw  MonitorTest.m //monitor Hoare 


// Monitor.m, line 58: 


// Monitor.m, line 59: Para compilar y hacer un Singal and exit es de esta manera


// Monitor.m, line 60:     m2jr -sx MonitorTest.m


// Monitor.m, line 61: */
}
