/* This JR file was generated by m2jr */
/* for the signal and continue signaling discipline */


// monitorSemaforo.m, line 1: 


// monitorSemaforo.m, line 2: /*SIMULAMOS UN SEMAFORO CON MONITORES*/


// monitorSemaforo.m, line 3: _monitor monitorSemaforo {

class monitorSemaforo {
  sem m_mutex = 1;
  sem m_urgentq = 0;
  int m_n_urgentq = 0;
  String m_name;
  public monitorSemaforo(String n) {
    this.m_name = n;
  }
  private void m_next() {
      if (m_n_urgentq > 0) {
        m_n_urgentq--;
        V(m_urgentq);
      }
      else {
        V(m_mutex);
      }
  }

// monitorSemaforo.m, line 4: 


// monitorSemaforo.m, line 5:     _var int count = 5; // Valor inicial del semaforo

private int
count
=5;
// monitorSemaforo.m, line 6:     _condvar colaProcesos;


// monitorSemaforo.m, line 7:  


// monitorSemaforo.m, line 8:     _proc void Mwait(){

private m_condvar colaProcesos = new m_condvar("colaProcesos");
public
void
Mwait
(){
    op void m_return_from_wait();
    P(m_mutex);

// monitorSemaforo.m, line 9:         count--;

count
--;
// monitorSemaforo.m, line 10:         if(count < 0) _wait(colaProcesos);    //si no hay recursos bloqueo proceso

if
(count
<0){  m_condvar m_cv = (colaProcesos );
  send m_cv.m_wait(m_return_from_wait,0);
  send m_cv.m_wait_ranks(0);
  m_next();
  P(m_return_from_wait);
  P(m_mutex);
}
// monitorSemaforo.m, line 11:     }


// monitorSemaforo.m, line 12: 


// monitorSemaforo.m, line 13:     _proc void Msignal(){

  m_next();
}
public
void
Msignal
(){
    op void m_return_from_wait();
    P(m_mutex);

// monitorSemaforo.m, line 14:         count++;

count
++;
// monitorSemaforo.m, line 15:         if(count <= 0){

if
(count
<=0){
// monitorSemaforo.m, line 16:             _signal(colaProcesos); // si hay procesos bloqueados, despierto uno

(colaProcesos ).m_signal();

// monitorSemaforo.m, line 17:         }


// monitorSemaforo.m, line 18:     }

}
// monitorSemaforo.m, line 19: }

  m_next();
}

// monitorSemaforo.m, line 20: 


// monitorSemaforo.m, line 21: /*


// monitorSemaforo.m, line 22: Este es el codigo para compilar un monitor que luego se utiliza 


// monitorSemaforo.m, line 23: en un programa .jr.


// monitorSemaforo.m, line 24: La manera en que se compila este monitor es la siguiente 


// monitorSemaforo.m, line 25:     m2jr  MonitorTest.m //monitor MESA Lampson y Redell


// monitorSemaforo.m, line 26:     m2jr -sw  MonitorTest.m //monitor Hoare 


// monitorSemaforo.m, line 27: 


// monitorSemaforo.m, line 28: Para compilar y hacer un Singal and exit es de esta manera


// monitorSemaforo.m, line 29:     m2jr -sx MonitorTest.m


// monitorSemaforo.m, line 30: */
}
