//b)	Hay tres sillones de corte y tres barberos que atienden cada uno de ellos.

import edu.ucdavis.jr.JR;

public class Barberia{

    private static final int N = 5;
    private static final int M = 30; //clientes
    private static final int SILLONES = 3; //cantidad de sillones
    private static int msj=0; //lo uso como valor vacio para enviar mensajes pero no tiene importancia real el mensaje
    private static int clientesEsperando = 0; 
    private static op void mutex(String); //proteger cantidad
    //cada proceso tenga su propio canal de comunicacion
    private static cap void(int) cliente[] = new cap void(int)[M]; //capacidad de los sillones
    private static cap void(int) barbero[] = new cap void(int)[SILLONES]; //capacidad de los barberos
    
    private static op void puedoEsperar(int); //buzon compartido de donde los barberos obtienen el siguiente cliente a atender

    public static void main(String... args){
        send mutex(" ");
        for (int i = 0; i < M; i++) { // inicializo los clientes
            cliente[i] = new op void(int);
        }
        for (int i = 0; i < SILLONES; i++) {
            barbero[i] = new op void(int);
        }
        Barberia b = new Barberia();
    }

    private static process Barbero((int b=0; b<SILLONES; b++)){
        int cli;
        while (true) { 
            System.out.println("Barbero "+b+" durmiendo");
            receive puedoEsperar(cli); //el barbero espera que haya un cliente
            System.out.println("Barbero "+b+" despierto esperando al cliente "+cli+" en el sillon");
            send cliente[cli](b); //aviso al cliente que puede sentarse en el sillon y le mando mi codigo para que sepa con quien comunicarse
            receive barbero[b](msj); //espero a que el cliente se siente en el sillon
            System.out.println("Barbero "+b+" cortando el pelo");
            pausa(2000); // simulo el tiempo que tarda en cortar el pelo
            send cliente[cli](msj); //aviso al cliente que ya termine de cortarle el pelo
            System.out.println("Barbero "+b+" termino de cortar el pelo");
            receive barbero[b](msj); //espero a que el cliente se vaya
        }   
    }

    private static process Cliente((int i=0; i<M; i++)){ 
        String aux;
        int barb; //variable para guardar el barbero asignado
        receive mutex(aux);
        if(clientesEsperando < N){
            clientesEsperando++;
            send mutex("");
            System.out.println("Cliente " + i + " espera en la barberia");
            send puedoEsperar(i); //el cliente avisa que esta esperando y manda su codigo
            receive cliente[i](barb); //espera que le avisen que barbero le fue asignado
            System.out.println("Cliente "+i+" Barbero asigando --> "+barb);

            receive mutex(aux); 
            clientesEsperando--; 
            send mutex(""); 

            System.out.println("Cliente " + i + " se sienta en un sillon del barbero " + barb);
            send barbero[barb](msj); //aviso que me sente en el sillon
            receive cliente[i](msj); //espero a que el barbero me avise que termino de cortarme el pelo
            System.out.println("Cliente " + i + " se levanta del sillon y se va a su casa");
            pausa(1000); //simulo el tiempo que tarda en irse
            send barbero[barb](msj); //aviso que me fui
        }else {
            send mutex(""); //libero el mutex
            System.out.println("Cliente " + i + " no puede esperar, se va a su casa");
        }    
    }

    private static op void pausa(int tiempo){  
        try{
                Thread.sleep(tiempo);
        }catch(java.lang.Exception e){}
    }    
}

    
