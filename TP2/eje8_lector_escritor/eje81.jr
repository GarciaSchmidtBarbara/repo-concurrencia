//8.a lectores y escritores sobre un archivo. PRIORIDAD LECTORES
//lectores: todos pueden acceder a la vez.
//escritores: solo 1 puede acceder a la vez. 

import edu.ucdavis.jr.JR;

public class eje8{
   
    static int L = 5; 
    static int E = 10;

    static sem puedoLeer =L;    //semaforo contador
    static sem puedoEscribir =1;    //semaforo binario

    static int num_lectores = 0; //para saber cuantos lectores hay leyendo
    static sem mutexL = 1; //proteger la var num_lectores

    private static process Escritores((int i=0; i<E; i++)){
        while (true) { 
            P(mutexL);
            if(num_lectores==0){
                P(puedoEscribir);   // Espera que no haya otros escritores ni lectores
                System.out.println("Proceso "+i+" escribe ");
                V(puedoEscribir);
            }
            
            int tiempo=(int)(Math.random() * 500)+100; 
            call pausa(tiempo);
        }   
    }

    private static process Lectores((int i=0; i<L; i++)){
        while(true) {
            P(mutexL);
            num_lectores++;
            if(num_lectores==1){

            }
        }
    }

    private static op void pausa(int tiempo){  
        try{
            Thread.sleep(tiempo);
        }catch(java.lang.Exception e){}
    }

    //Metodo principal
    public static void main(String[] args) {
        try {
            JR.registerQuiescenceAction(done);     
        } catch (edu.ucdavis.jr.QuiescenceRegistrationException e) {
            e.printStackTrace();
        }
    }

    // Accion a ejecutar cuando terminan todos los procesos
    private static op void done() {
        System.out.println("FIN");
    }
}

    
