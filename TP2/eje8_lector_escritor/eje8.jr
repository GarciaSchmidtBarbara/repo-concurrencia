//8.b lectores y escritores sobre un archivo. PRIORIDAD ESCRITORES
//lectores: todos pueden acceder a la vez.
//escritores: solo 1 puede acceder a la vez. 




import edu.ucdavis.jr.JR;

public class eje8b{
   
    static int L = 5; 
    static int E = 10;

    static sem puedoLeer = 0;    //semaforo contador
    static int lectores_esperando = 0; 
    static int lectores_activos = 0;

    static sem puedoEscribir =0;    //semaforo binario
    static int escritores_esperando = 0; 
    static int escritores_activos = 0;

    static sem mutex = 1;   //proteje las variables enteras

    private static process Escritores((int i=0; i<E; i++)){
        while (true) { 
            P(mutex);
            escritores_esperando++; 
            if(lectores_activos>0 || escritores_activos>0){     //si hay alguien activo   
                V(mutex);
                P(puedoEscribir);   //espero
                P(mutux);
            }
            
            //cuando el proceso pueda continuar..
            escritores_esperando--;
            escritores_activos++;
            V(mutex);
            System.out.println("Proceso "+i+" escribiendo...");
            P(mutex);
            escritores_activos--;
            if(escritores_esperando>0){
                V(puedoEscribir);
            }else if (lectores_esperando>0){
                for (int j = 0; j < lectores_esperando; j++) {
                    V(podemosLeer); //libero a todos los lectores que esten esperando en este momento
                }
            }
            V(mutex);
        }   
    } 

    private static process Lectores((int i=0; i<L; i++)){
        while(true) {
            P(mutex);
            if(escritores_activos > 0 || escritores_esperando > 0){ 
               lectores_esperando++;
                V(mutex);
                P(puedoLeer);   // espera a que le den permiso
            } else {
                lectores_activos++;  // puede leer directamente
                V(mutex);
                System.out.println("Proceso " + i + " leyendo..."); 

                P(mutex);
                lectores_activos--;
                if(lectores_activos == 0 && escritores_esperando > 0){
                    V(puedoEscribir);
                }
                V(mutex);
                continue;
            }

            // Si estaba esperando, llega acÃ¡..
            P(mutex);
            lectores_esperando--;
            lectores_activos++;
            V(mutex);
            System.out.println("Proceso "+i+" leyendo...");
            
            P(mutex);
            lectores_activos--;
            if(lectores_activos==0 && escritores_esperando>0){  //si no hay lectores activos y hay escritores esperando
                V(puedoEscribir);
            }
            V(mutex);
        }
    }

    private static op void pausa(int tiempo){  
        try{
            Thread.sleep(tiempo);
        }catch(java.lang.Exception e){}
    }

    //Metodo principal
    public static void main(String[] args) {
        try {
            JR.registerQuiescenceAction(done);     
        } catch (edu.ucdavis.jr.QuiescenceRegistrationException e) {
            e.printStackTrace();
        }
    }

    // Accion a ejecutar cuando terminan todos los procesos
    private static op void done() {
        System.out.println("FIN");
    }
}

    
