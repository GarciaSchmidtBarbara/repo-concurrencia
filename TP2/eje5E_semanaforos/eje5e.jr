//e-	buffer acotado (circular), n productores y m consumidores.
//productores: necesitan 1 semaforo para cuidar la var pos del buffer
//consumidores: necesita 1 semanaforo para cceder cuando haya un dato a consumir
//consumidores: necesitan 1 semaforo para cuidar la var pos del buffer

import edu.ucdavis.jr.JR;

public class eje5e{


    static int N = 5;   static int M = 5; static int X=10;
    static int[]buffer = new int[X];  //buffer acotado (EJEMPLO CIRCULAR.)
    static sem puedoConsumir =0;
    static sem mutexP = 1;
    static int posP = 0; //para recorrer el vector
    static sem mutexC = 1; 
    static int posC = 0; //para recorrer el vector

    
    
    private static op void pausa(int tiempo){  
        try{
            Thread.sleep(tiempo);
        }catch(java.lang.Exception e){}
    }

    //Procesos productores
    private static process PProducer((int i=0; i<N; i++)){
        while (true) { 
            int valor = (int)(Math.random() * 10);
            P(mutexP);  //exclusion mutua entre productores
            buffer[posP]= valor;
            System.out.println("Proceso "+i+" en Pos: "+posP+" produce: " + valor);
            posP = (posP + 1) % X; //logra un vector circular
            V(mutexP);  //libero buffer
            V(puedoConsumir);   //Senial al consumidor de que hay algo disponible
            call pausa(500); 
        }   
    }

    // Procesos Consumidores
    private static process PConsumer((int i=0; i<M; i++)){
        while(true) {
            P(puedoConsumir);   //Espera hasta que haya un item
            P(mutexC);  //exclusion mutua entre consumidores
            int valor = buffer[posC];
            System.out.println("Proceso "+i+" en Pos: "+posC+" consume: " + valor);
            posC= (posC + 1) % X;
            V(mutexC);  //libero buffer
            call pausa(500);
        }
    }

    //Metodo principal
    public static void main(String[] args) {

        try {
            JR.registerQuiescenceAction(done);     
        } catch (edu.ucdavis.jr.QuiescenceRegistrationException e) {
            e.printStackTrace();
        }
    }

    // Accion a ejecutar cuando terminan todos los procesos
    private static op void done() {
        System.out.println("FIN");
    }
}

    
