//El primer proceso entrara en la seccion critica de inmediato, ya que TestAndSet(lock) devolvera false y saldra del bucle while.
//Los demas procesos no pueden entrar ahora, ya que lock esta establecido en true, por lo que el bucle while continua siendo true. 
//Se garantiza la exclusion mutua. Una vez que el primer proceso sale de la seccion critica, lock cambia a false. 
//Por lo tanto, ahora los demas procesos pueden entrar uno por uno.

import edu.ucdavis.jr.JR;      

public class eje4{
    private static int lock =false;

    private static op void pausa(){ 
        try{
                Thread.sleep(1000);
        }catch(java.lang.Exception e){}

    }

    private static boolean TestAndSet(){    //algoritmo de Stallings
        if (lock==false) {
            lock=true;
        }
        return lock;      
    }

    //en la declaracion se incluye un for que crea 5 procesos, c/u con un id propio
    private static process Proceso((int id = 0; id < 25; id++)){
        while (true){
            while(! TestAndSet())       //si lock esta en verdadero (ocupado) se queda esperando. cuando lock este en falso (libre) continua
                call pausa();
            System.out.println("Proceso " + id + " ingresa a seccion critica");
            call pausa();
            System.out.println("Proceso " + id + "  sale de la seccion critica");
            lock = 0;
            call pausa();
        }
       
    }

    //Metodo principal
    public static void main(String[] args) {
        try {
            JR.registerQuiescenceAction(done);     
        } catch (edu.ucdavis.jr.QuiescenceRegistrationException e) {
            e.printStackTrace();
        }
    }

    // Accion a ejecutar cuando terminan todos los procesos(NUNCA VAN A TERMINAR POR QUE TIENEN UN WHILE TRUE)
    private static op void done() {
        System.out.println("TODOS LOS PROCESOS TERMINADOS");
    }
}

