//b buffer ilimitado (no tiene limites de tamanio), 1 productor y 1 consumidor.
//productor unico: no se genera condicion de carrera, es el unico que agrega valores
//consumidor unico: necesita sincronizacion con semafro para saber cuando consumir

import edu.ucdavis.jr.JR;      
import java.util.LinkedList;

public class eje5b{

    static LinkedList<Integer> buffer = new LinkedList<Integer>();  //buffer infinito
    private static sem puedoConsumir =0;
    
    private static op void pausa(int tiempo){  
        try{
                Thread.sleep(tiempo);
        }catch(java.lang.Exception e){}

    }

    //Proceso productor. primero agrega un valor y luego avisa al consumidor
    private static process PProducer{
        int valor=0;
        while (true) { 
            buffer.add(valor);
            System.out.println("Producido: " + valor);
            call pausa(200);
            valor++;
            V(puedoConsumir);   //incremento semaforo del consumidor. 
            
        }   
    }

    // Proceso Consumidor
    private static process PConsumer{
        while(true) {
            P(puedoConsumir);   //decremento semaforo
            int valor = buffer.removeFirst();
            System.out.println("Consumido: " + valor);
            call pausa(500);
        }
    }

    //Metodo principal
    public static void main(String[] args) {
        try {
            JR.registerQuiescenceAction(done);     
        } catch (edu.ucdavis.jr.QuiescenceRegistrationException e) {
            e.printStackTrace();
        }
    }

    // Accion a ejecutar cuando terminan todos los procesos
    private static op void done() {
        System.out.println("TODOS LOS DATOS PRODUCIDOS, LEIDOS POR EL CONSUMIDOR");
    }
}

    
