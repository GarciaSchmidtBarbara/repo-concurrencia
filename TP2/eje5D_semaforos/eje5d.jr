//d- buffer acotado o limitado (circular), 1 productor y 1 consumidor.
//productor: no puede sobreescribir lo que produjo.
//consumidor: necesita semanaforo para cceder cuando haya un dato a consumir
//i) no se puede insertar un elemento cuando el buffer está lleno y 
//ii) no se puede extraer un elemento cuando el buffer está vacío.

import edu.ucdavis.jr.JR;

public class eje5d{


    static int N = 5;   //cant espacios del buffer
    static int[]buffer = new int[N];  //buffer acotado (EJEMPLO CON NO CIRCULAR.)

    static sem puedoProducir = N; //controla numero de espacios libres. Si se llena el vector debe esperar
    static sem puedoConsumir = 0; //controla numero de espacios llenos. 
    
    
    private static op void pausa(int tiempo){  
        try{
                Thread.sleep(tiempo);
        }catch(java.lang.Exception e){}

    }

    //Proceso productor
    private static process PProducer{
        int valor = 0;
        int pos = 0; //para recorrer el vector
        while (true) { 
            P(puedoProducir);
            buffer[pos]=valor;
            System.out.println("Pos: "+pos+" se produce: " + valor);
            pos=(pos+1)%N;
            valor++;
            V(puedoConsumir);   //Senial al consumidor de que hay algo disponible
            call pausa(200); 
        }   
        System.out.println("BUFFER PRODUCIDO COMPLETAMENTE");
    }

    // Proceso Consumidor
    private static process PConsumer{
        int pos = 0;
        while(true) {
            P(puedoConsumir);   //Espera hasta que haya un item
            int valor = buffer[pos];
            System.out.println("Pos: "+pos+" se consume: " + valor);
            pos=(pos+1)%N;
            V(puedoProducir); //senial al productor de que libere un espacio
            call pausa(500);
        }
        System.out.println("BUFFER CONSUMIDO COMPLETAMENTE");
    }

    //Metodo principal
    public static void main(String[] args) {

        try {
            JR.registerQuiescenceAction(done);     
        } catch (edu.ucdavis.jr.QuiescenceRegistrationException e) {
            e.printStackTrace();
        }
    }

    // Accion a ejecutar cuando terminan todos los procesos
    private static op void done() {
        System.out.println("FIN");
    }
}

    
