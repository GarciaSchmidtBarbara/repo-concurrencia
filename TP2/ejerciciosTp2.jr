'''El primer proceso entrará en la sección crítica de inmediato, ya que TestAndSet(lock) devolverá false y saldrá del bucle while.
Los demás procesos no pueden entrar ahora, ya que lock está establecido en true, por lo que el bucle while continúa siendo true. 
Se garantiza la exclusión mutua. Una vez que el primer proceso sale de la sección crítica, lock cambia a false. 
Por lo tanto, ahora los demás procesos pueden entrar uno por uno.
'''

import edu.ucdavis.jr.JR;      

public class testAndSet{
    private static boolean lock =false;

    private static op void pausa(){ 
        try{
                Thread.sleep(1000);
        }catch(java.lang.Exception e){}

    }

    public static boolean TestAndSet(){
        < boolean initial = lock; 
        lock = true; 
        return initial; >
    }

    private static process Proceso(int id){
        while (true){
            if (! call TestAndSet){
                System.out.println("Proceso "+ id + " ingresa a seccion critica");
                call pausa();
                System.out.println("Proceso "+ id + " sale de la seccion critica");
                look = false;
            }else{
                System.out.println("Proceso "+ id + " en pausa");
                call pausa();
            }
        }
       
    }

    //Metodo principal
    public static void main(String[] args) {
        // Lanzar 5 procesos
        for (int i = 0; i < 5; i++) {
            new Proceso(i);
        }
        try {
            JR.registerQuiescenceAction(done);     
        } catch (edu.ucdavis.jr.QuiescenceRegistrationException e) {
            e.printStackTrace();
        }
    }

    // Accion a ejecutar cuando terminan todos los procesos
    private static op void done() {
        System.out.println("TODOS LOS PROCESOS TERMINADOS");
    }

}

