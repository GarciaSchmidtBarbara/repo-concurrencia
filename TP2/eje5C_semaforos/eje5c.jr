//c-	buffer ilimitado, n productores y m consumidores.
//productores: necesitan semaforo para acceder al buffer (para no colocarse en el mismo sitio)
//consumidores: necesita sincronizacion con semafro para saber cuando y donde consumir

import edu.ucdavis.jr.JR;      
import java.util.LinkedList;

public class eje5c{

    static LinkedList<Integer> buffer = new LinkedList<Integer>();  //buffer infinito
    private static sem puedoConsumir =0; //sem general
    private static sem mutexC =1;   //semaforo binario que restinge el acceso al buffer a 1 proceso a la vez
    private static sem mutexP =1; 
    private static int N = 5;   //cant productores
    private static int M = 5;   //cant consumidores
    
    private static op void pausa(int tiempo){  
        try{
                Thread.sleep(tiempo);
        }catch(java.lang.Exception e){}

    }

    //Proceso productor
    private static process PProducer((int i=1; i<=N; i++)){
        int valor=0;
        while (true) { 
            P(mutexP);  //Exclusión mutua para buffer
            buffer.add(valor);
            System.out.println("Proceso "+i+" produce: " + valor);
            valor++;
            V(mutexP);  //libero buffer
            V(puedoConsumir);   //Señal al consumidor de que hay algo disponible
            call pausa(500); 
        }   
    }

    // Proceso Consumidor
    private static process PConsumer((int i=1; i<=M; i++)){
        while(true) {
            P(puedoConsumir);   //Espera hasta que haya un item
            P(mutexC);      //Exclusión mutua para buffer
            int aux = buffer.removeFirst();
            System.out.println("Consumidor "+i+" consume: " + aux);
            V(mutexC);  //Libera buffer
            call pausa(500);
        }
    }

    //Metodo principal
    public static void main(String[] args) {

        try {
            JR.registerQuiescenceAction(done);     
        } catch (edu.ucdavis.jr.QuiescenceRegistrationException e) {
            e.printStackTrace();
        }
    }

    // Accion a ejecutar cuando terminan todos los procesos
    private static op void done() {
        System.out.println("ESTO NUNCA VA A PASAR POR EL WHILE TRUE");
    }
}

    
