//8.c. una solucion justa
//lectores: todos pueden acceder a la vez.
//escritores: solo 1 puede acceder a la vez. 
//Se genera una cola, el primero que llega accede.



import edu.ucdavis.jr.JR;

public class eje8c{
   
    static int L = 5; 
    static int E = 5;
    static int numero = 10;

    static sem puedoLeer = L;    //semaforo contador
    static int cantL = 0; //contador de lectores activos
    static sem mutexL = 1; //proteger la var cantL

    static sem puedoEscribir =1;    //semaforo binario
    
    private static op void pausa(int tiempo){  
        try{
            Thread.sleep(tiempo);
        }catch(java.lang.Exception e){}
    }

    private static process Escritores((int i=0; i<E; i++)){
        while (true) { 
            P(mutexL);
            if (cantL == 0) {
                P(puedoLeer); // El primer escritor bloquea a los lectores
            }
            V(mutexL);

            P(puedoEscribir);   // Espera que no haya otros escritores ni lectores

            numero = (int)(Math.random() * 10);
            System.out.println("Proceso "+i+" escribe " + numero);

            V(puedoLeer); //Libera el acceso a los lectores 
       
            V(puedoEscribir); // Libera el acceso a otros escritores

            int tiempo=(int)(Math.random() * 500)+100; 
            call pausa(tiempo);
        }   
    }

    private static process Lectores((int i=0; i<L; i++)){
        while(true) {
            P(mutexL); 
            cantL++;
            if(cantL ==1){
                P(puedoEscribir);   //el primero bloquea a los escritores
            }
            System.out.println("    Hay "+cantL+" lectores activos");
            System.out.println("Proceso "+i+" leyendo " + numero);
            V(mutexL);

            P(mutexL);
            cantL--;
            if (cantL == 0) {   //ultimo lector libera a los escritores
                V(puedoEscribir);
                System.out.println("    Hay "+cantL+" lectores activos");
            }
            V(mutexL);

            int tiempo=(int)(Math.random() * 200)+100; 
            call pausa(tiempo);
        }
    }

    //Metodo principal
    public static void main(String[] args) {
        try {
            JR.registerQuiescenceAction(done);     
        } catch (edu.ucdavis.jr.QuiescenceRegistrationException e) {
            e.printStackTrace();
        }
    }

    // Accion a ejecutar cuando terminan todos los procesos
    private static op void done() {
        System.out.println("FIN");
    }
}

    
